# Data Types in R {#sec-data-types}

Now that we are familiar with the basic syntax of R and its syntax. We move on to different data types, and that's because these operators works on one or more of these data types. Understanding the concept of the data types, reduces the likelihood of an error occurring, or in some case ease the debugging process when an error does occur. This is because one of the most common source of error when using R, or performing analysis in general regardless of the software used is wrong, inappropriate or inconsistent data types, [read this blog post for more details ](https://statsandr.com/blog/top-10-errors-in-r/).

Researchers regardless of the field are analysts working with various forms of data, which can be survey responses, secondary data from institutions, and field or lab measurements among others. These data are usually any of numbers, response in form of alphabets, ranking, rating or choice response such as yes/no. It is crucial to understand the types of data you are working with before any analysis is done. In the research process @fig-str, data collection and analysis are key stages, and one that frustrates a lot of researcher. While data collection is often tedious, this should not be the same with data analysis. With a proper framework and workflow, analyzing your data should be less daunting than collecting it.


![Stages of Research](images/research-stages.png){#fig-str fig-align="center" .lightbox}

There are six different data types in R, five which we will come across frequently in this book. In R,  the function `typeof()` and `class()` are used to check the data type of a variable, these functions will be useful as we move along. The data types are in R are: 

-   character
-   factor
-   double    
-   integer
-   logical
-   complex

## Character

Characters represent strings/texts and are written in R by enclosing contents in quotation marks. The quotation mark can either be the single `'` or double `"` and anything can be a character as long its contents are wrapped in quotation mark. 

```{r}
"tree"
```

I'd advise to use the double `"` over the single `'` as it allows you to use the apostrophe without worry, and it just also looks better. 

```{r}
#| error: true

'My boss said - "what makes a good boss is not knowing all, that's why I have employees"'
```

The above code is wrong because of the apostrophe as it is mistaken as closing the character statement.
```{r}
"My boss said - 'what makes a good boss is not knowing all, that's why I have employees'"
"The man's children" # Definitely looks better
'The man"s children'

```

We can check the data type of an object with either `class()` or `typeof()`. 

```{r}
typeof("tree")
class("tree")
class("2")
class("+")
```

When we assign characters to a variable, the content of the variable will be evaluated and not the variable in its self. As explained in [Chapter @sec-ass] variables are references and not a value in themselves.

```{r}
tree <- "Quercus robur"
class(tree)
```

Let's look at the example below, we have error because `oak` is an object with no values assigned to it. So `oak` and `"oak"` are different. The latter is a character while the former is an object.

```{r}
#| error: true

class(oak)
```

There is a way to check if an objects is a character or not different from using `class()` and `typeof()`. The `is.character()` function returns a `TRUE` or `FALSE` used. `TRUE`, its a character data type and vice-versa.

```{r}
is.character("moabi")
is.character(2)
is.character("2")
```


## Factors {#sec-fcts}

Factors are used to represent categorical data in R. They are usually leveled, and can only contain predefined values. The levels are usually distinct values. Data that can be represented as factors relates to responses like educational status, income level/class, satisfaction rating and so on. For example, in a farm of 5000 livestock, 2000 are goats, 390 cattles, 1500 sheeps, and 1100 pigs. The levels, i.e., the distinct animals in the farm include goat, sheep, pig, and cattle.


### Types of Factors

There are two types of factors or categorical data. We have ordered (ordinal) categorical data or unordered (nominal) categorical data. The function `factor()` is used to create factors in R.

- **Nominal Factor**: These are unordered categorical data with levels. There's no degree of distance or ranking in nominal factor variables. Example are the name of states in a country, name of trees, names of treatments, and so on. Below are example nominal data.

```{r}
#| label: nominal-factor

livestocks <- factor(c("pig", "cattle", "goat", "sheep", "sheep",
                       "sheep", "pig", "sheep","sheep",
                       "sheep", "pig", "pig", "goat", "goat", "cattle")
                     )
tree_names <- factor(c("Lophira alata", "Triplochiton scleroxylon",
                       "Mansonia altissima", "Celtis africana", 
                       "Borassus aethiopum")
                     )
poultry_birds <-factor(c("breeders", "broilers", "layers"))
fertilizer <- factor(c("N", "P", "K"))
```


```{r}
livestocks
tree_names
poultry_birds
fertilizer
```

::: {.callout-tip}
The function, `c()`, is used to combine values. More about `c()` will be discussed in [Chapter @sec-fns]
:::

::: {.callout-note}
Treatment is a technical term used in research, if the word treatment seem unfamiliar to you at the moment, we will discuss it in the next part of this book.
:::

When we print this variables, notice the output, especially that of `livestock`, we see that `Levels` is included as part of the result with the categories arranged in alphabetical order. At a closer look, you see that `livestock` Levels returns only the distinct animals even while they appear more than once in the data.

Using the function `levels()` we can get this distinct values of a factor returned as character.

```{r}
levels(tree_names)
```

Using `class()` we can confirm the data type of these objects.
```{r}
class(poultry_birds)
```
If we use the `typeof()` function instead we get `integer`,soon to be discussed in [-@sec-integer]. This is because `class()` checks the object class, while `typeof()` storage mode or internal type of objects and the factors are built on top of integers.

```{r}
typeof(tree_names)
```

- **Ordinal Factors**: Ordinal factors are different from nominal factors, as they indicate a degree of difference, hierarchy, rank or order. Before we proceed to creating ordinal factors, let's get more understanding into the levels attribute of factors. When we created the nominal factors, we did not include the level argument, as R automatically does that for us. If we specify the level argument we take more control of how factors are organized dictating a particular print order. For example, let's check the difference in how the levels are arranged in the gender object below:

```{r}
gender_1 <- factor(c("m", "f"), levels = c("f", "m"))
gender_2 <- factor(c("m", "f"), levels = c("m", "f"))
```

```{r}
gender_1
gender_2
```



An example is month, days of the week, satisfaction level, employee's position in an organization and so on. Let's construct a hypothetical survey response on the satisfaction level of having trees cut down for other needs other than conservation:


```{r}
#| label: ordered-factor

satisfaction_level <- factor(c("very satisfied", "satisfied", "satisfied",
                               "dissatisfied", "very satisfied", "very dissatisfied",
                               "very satisfied", "dissatisfied"), 
                             levels = c("very dissatisfied", "dissatisfied",
                                        "neutral", "satisfied", "very satisfied"),
                             ordered = TRUE
                )

```


```{r}
satisfaction_level

class(satisfaction_level)
```

On printing the variable we can see that:

*   The levels are not arranged according to alphabetical order, 
*   The order arrangement of the levels when we print the follows the order specified in the argument `levels`,
*   The value neutral indicated in levels but not in the data collected is still printed as part of the levels. This indicate that factors are indeed predefined even if data on a particular factor is not collected. 

WWe can perform a quick check on the frequency of each category using the function `table()`.

```{r}
table(satisfaction_level)
```
 
The result shows `neutral` as having zero, meaning that no respondent choose neutral in this hypothetical survey.

:::{.callout-note appearance="simple"}
we have been using functions a lot now without properly defining what functions are. Just keep in mind that functions are little programs or block of codes that perform specified actions. More will be discussion on that in @sec-fns.
:::

To confirm if a variable is a factor data type use the `is.factor()` . Let's create a new survey response, but this time it won't be wrapped in the factor variable.

```{r}
satisfaction_level_chr <- c("very satisfied", "satisfied", "satisfied",
                               "dissatisfied", "very satisfied", "very dissatisfied",
                               "very satisfied", "dissatisfied")
```


```{r}
is.factor(satisfaction_level_chr)
is.factor(satisfaction_level)
```

We can also confirm if a factor is ordered or not using the function `is.ordered()`

```{r}
is.ordered(satisfaction_level)
```

## Numeric Data type
Numeric data are digits. There are two types of numeric data; integer and double.

### Integer {#sec-integer}
`Integer` are whole numbers and are written by writing a digit followed by a `L`.
```{r}
5L
class(5L)
```

When divided by another integer or another numeric data type the result is usually a `double`.
```{r}
25L/5L

typeof(25L / 5L)
```

Just like characters and factors, we can also check if a particular object is an integer using `is.integer()`.

```{r}
is.integer(5)
is.integer(5L)
```


### Doubles
Doubles are also referred to as floats. They are numbers with decimal point. 
```{r}
5.1
typeof(5.1)
```
When a mathematical operation is performed on a double, a double is return
```{r}
typeof(1.5/3)
```
To check if an object is a double we use its `is._` variant, in this case `is.double()`

```{r}
is.double(2.9)
```

A sequence of integers or doubles can be created using `:` with the start on the left and the end at the right of the symbol.

```{r}
1:15
```
As `is.integer()` returns true for all integers and `is.doubl()e` returns true for doubles, `is.numeric()` returns true for all both types of data.
```{r}
is.numeric(5L)
is.numeric(3.5)
```



## Logical {#sec-logical}

Logical data type are also referred to as Boolean values. Logical includes `TRUE`, `FALSE` and `NA` which means *Not Available*.

```{r}
class(TRUE)
class(NA)
class(FALSE)
```

In [Chapter @sec-comp], we saw that comparison operators always returns a logical operator as their result. We can also check the type as it is evaluated.

```{r}
class(5 > 2)
```
`5 > 2` is first evaluated which returns `TRUE`, then the `class()` of the result is checked which returns `TRUE`. In R, the deepest of the nested expressions are evaluated first and evaluated outwardly to the umbrella expression. We can also check for a logical value using `is.logical()`

```{r}
is.logical(20 < 3)
is.logical(NA)
```

## Complex
We will not use the complex data type and its unlikely to analyze these type of data. Complex data types are numbers with an imaginary term `i` added to them

```{r}
5i
1 + 5i

typeof(3i)
typeof(5 + 2i)
```
Similar to other data types, we can confirm if a data is a complex by using `is.complex()`
```{r}
is.complex(5i)
```


## Changing Data Types

In R we can change data types using `as._` similar to `is.` which is used to check a data type.

```{r}
tree_height <- 20:40
tree_height

typeof(tree_height)
```
The above can be changed to a double using `as.double()` and back to integer using `as.integer()`

```{r}
tree_height_2 <- as.double(tree_height)
typeof(tree_height_2)
```

We can also change characters to factors and factors to characters in a similar way
```{r}
#| label: changing-data-types

tree_names <- c("terminalia", "eucalyptus", "iroko", "oak")
class(tree_names)
```

To change the above to factor data type we'll use the `as.factor()` function.

```{r}
tree_names_fct <- as.factor(tree_names)

class(tree_names_fct)
```

We can change this back to character by using `as.character()`.

```{r}
tree_names_chr <- as.character(tree_names_fct)
class(tree_names_chr)
```

`as.character()` can be used to coerce any data type to a character

```{r} 
tree_height
class(tree_height)
```


```{r} 
tree_height_chr <- as.character(tree_height)
class(tree_height_chr)
```

Characters can be changed back to numeric or double data type using the `as.double()`, `as.integer()` or `as.numeric()` function. The functions will return numbers only if what is been converted contains only digits, else NA is returned as the result. we get a warning when there's not a digit in the object being converted.

```{r}
tree_height <- c(10, 15, 20, "25m")
tree_height
class(tree_height)
tree_height <- as.double(tree_height)
tree_height
class(tree_height)
```

we can also convert factors to integers. As said in [ -@sec-fcts], factors are built on integers.

```{r}
fruits <- factor(c("orange", "tomato", "olive"))
class(fruits)
as.integer(fruits)
```

We can also convert other data types to logical data type. All other numbers evaluate to TRUE either if they are positive or negative except zero which evaluates to zero.
```{r}
as.logical(c(1, 0, -1, 3, 0, 0 , 32))
```

For characters, every other thing converts to NA, except **T**, **TRUE**, **True**, and **true** which converts to `TRUE` and **F**, **FALSE**, **False** and **false** which converts to `FALSE`
```{r}
as.logical(c("TRUE", 1, 0, "FALSE", "F", "T", 3, "False", "man", "true", "tRUE", "True", "t"))
```

::: callout-note
Data coercion/conversion can either be implicit or explicit. Coercion is explicit when we intentionally change the variable type. Implicit coercion is when R changes the variable type for us automatically. 
:::

## Other Data Types
There are other data types not covered such as:

-   Date
-   POSIXct
-   Raw

:::{.callout-note}
Do not be surprised when you import some data into R and see that numbers are characters, so ensure you confirm that using all the `is._` variations of functions you will see in this chapter.
:::

## Recommended Reading
  [Chapter 3 of Advanced R by Hadley Wickham, 2019](https://adv-r.hadley.nz/vectors-chap.html) gives in-depth understanding of the data types in R.

  [Hands-On Programming with R by Garret Grolemund](https://rstudio-education.github.io/hopr/r-objects.html) explain the concepts of R in a game-like approach using deck of cards.

## Summary {.unnumbered}

Data types in R include character, factor, double, integer, and logical. This data type can be checked using `class()`,  `typeof()` and their adjoining `is._` function. These data types can be converted from one type to another using `as._`.
