# Data Types in R {#sec-data-types}

 One of the most common source of error when using R, or performing analysis in general regardless of the platform or software used is [wrong, inappropriate or inconsistent data types](https://statsandr.com/blog/top-10-errors-in-r/). Understanding data types in R is fundamental for effective data analysis and manipulation. Some operations and analysis are possible because of specific types of data, getting this wrong will give unexpected results. Researchers regardless of the field are analysts working with various forms of data, which can be in form of survey responses, secondary data, field or lab measurements. These data are usually a combination of numbers in the form of a measurements, words or text, such as survey participants responses, or a ranking or category such as yes/no responses, income level or marital status. Before proceeding with any analysis, it is crucial to understand the types of data we are working with. In the research process, as seen in @fig-str, data collection and analysis are key stages.

Each data has its own unique structure and requirements influencing the method used in analyzing them. Understanding the distinctions between different data types ensures we can manipulate, analyze and interpret the findings from our data effectively. Here, we will explore the data types in R

![Stages of Research](images/research-stages.png){#fig-str fig-align="center"}

There are six different data types in R, five which will be used frequently in this book. In R,  the function `typeof()` and `class()` are used to check the data type of a variable. The data types are in R are:

-   character
-   factor
-   double    
-   integer
-   logical
-   complex

## Character

Characters represent text and are written in R by enclosing contents in quotation marks. The quotation mark can either be the single `'` or double `"` and anything can be the content of a string as long as the quotation mark enclose the content. It is more common to use the double `"` than the single `'`. 

```{r}
"tree"
```

We can check the data type of the text *"tree"* with either `class()` or `typeof()`.

```{r}
typeof("tree")
class("tree")
class("2")
class("+")
```

When we assign characters to a variable, the content of the variable will be evaluated and not the variable in its self. As explained in [Chapter @sec-ass] variables are references and not a value in themselves.

```{r}
tree <- "Quercus robur"
class(tree)
```

Let's look at the example below, we have error because `oak` is an object with no values assigned to it. So `oak` and "oak" are different. The latter is a character while the former is an object.

```{r}
#| error: true

class(oak)
```

There is a way to check if an objects is a character or not different from using `class()` and `typeof()`. Using `is.character()` function returns a TRUE or FALSE when checking if objects are character data type.

```{r}
is.character("moabi")
is.character(2)
is.character("2")
```

Do not be surprised when you import some data into R and see that numbers are characters, so ensure you confirm that using all the `is._` variations of functions you will see in this chapter.

## Factors {#sec-fcts}

Factors are used to represent categorical data in R. In R, factors are always leveled, and can only contain predefined values. A good example of data that can be represented as factors are survey response like educational status, income level, satisfaction rating and so on. There are two types of factors or categorical data. We have ordered (ordinal) categorical data or unordered (nominal) categorical data. The function `factor()` is used to create factors in R.

### Nominal Factor

These are unordered categorical data with levels. There's no degree of distance or ranking in nominal factor variables. Example are the name of states in a country, name of trees, nursery plantation site, and so on. Below are three data, one for tree names, another for poultry birds according to use, and the last is fertilizer.

```{r}
#| label: nominal-factor
tree_names <- factor(c("Lophira alata", "Triplochiton scleroxylon", "Mansonia altissima",
                       "Celtis africana", "Borassus aethiopum"))
poultry_birds <-factor(c("breeders", "broilers", "layers"))
fertilizer <- factor(c("N", "P", "K"))
```


```{r}
tree_names
poultry_birds
fertilizer
```

::: {.callout-tip appearance="simple"}
The function `c()` used above is used to combine values.
:::
When we print this variables, notice that `Levels` is included as part of the print with the categories arranged in alphabetical order. To see the levels of a factor object pass the object to the function `levels()`

```{r}
levels(tree_names)
```

We can check the class of these objects and confirm that they are indeed factors.
```{r}
class(tree_names)
class(poultry_birds)
class(fertilizer)
```
When you use the `typeof()` function on these objects, the result is `integer` which will be discussed in [ -@sec-integer]. The result is so because factors are built on top of integers.

```{r}
typeof(tree_names)
```

###   Ordinal Factors
Ordinal factors are somewhat different from nominal or regular factors. When the nominal factors above where created, we did it without specifying a level argument, when the level is specified, we are indicating a rank or degree of distance between the factors. An example is month, days of the week, satisfaction level, employee's position in an organization and so on. Let's construct a hypothetical survey response on the satisfaction level of having trees cut down for other needs other than conservation:


```{r}
#| label: ordered-factor

satisfaction_level <- factor(c("very satisfied", "satisfied", "satisfied",
                               "dissatisfied", "very satisfied", "very dissatisfied",
                               "very satisfied", "dissatisfied"), 
                             levels = c("very dissatisfied", "dissatisfied",
                                        "neutral", "satisfied", "very satisfied"),
                             ordered = TRUE
                )

```


```{r}
satisfaction_level

class(satisfaction_level)
```

On printing the variable we can see that:

*   The levels are not arranged according to alphabetical order, 
*   The order arrangement of the levels when we print the follows the order specified in the argument `levels`,
*   The value neutral indicated in levels but not in the data collected is still printed as part of the levels. This indicate that factors are indeed predefined even if data on a particular factor is not collected. 

WWe can perform a quick check on the frequency of each category using the function `table()`.

```{r}
table(satisfaction_level)
```
 
The result shows `neutral` as having zero, meaning that no respondent choose neutral in this hypothetical survey.

:::{.callout-note appearance="simple"}
we have been using functions a lot now without properly defining what functions are. Just keep in mind that functions are little programs or block of codes that perform specified actions. More will be discussion on that in @sec-fns.
:::

To confirm if a variable is a factor data type use the `is.factor()` . Let's create a new survey response, but this time it won't be wrapped in the factor variable.

```{r}
satisfaction_level_chr <- c("very satisfied", "satisfied", "satisfied",
                               "dissatisfied", "very satisfied", "very dissatisfied",
                               "very satisfied", "dissatisfied")
```


```{r}
is.factor(satisfaction_level_chr)
is.factor(satisfaction_level)
```

We can also confirm if a factor is ordered or not using the function `is.ordered()`

```{r}
is.ordered(satisfaction_level)
```

## Numeric Data type
Numeric data are digits. There are two types of numeric data; integer and double.

### Integer {#sec-integer}
`Integer` are whole numbers and are written by writing a digit followed by a `L`.
```{r}
5L
class(5L)
```

When divided by another integer or another numeric data type the result is usually a `double`.
```{r}
25L/5L

typeof(25L / 5L)
```

Just like characters and factors, we can also check if a particular object is an integer using `is.integer()`.

```{r}
is.integer(5)
is.integer(5L)
```


### Doubles
Doubles are also referred to as floats. They are numbers with decimal point. 
```{r}
5.1
typeof(5.1)
```
When a mathematical operation is performed on a double, a double is return
```{r}
typeof(1.5/3)
```
To check if an object is a double we use its `is._` variant, in this case `is.double()`

```{r}
is.double(2.9)
```

A sequence of integers or doubles can be created using `:` with the start on the left and the end at the right of the symbol.

```{r}
1:15
```
As `is.integer()` returns true for all integers and `is.doubl()e` returns true for doubles, `is.numeric()` returns true for all both types of data.
```{r}
is.numeric(5L)
is.numeric(3.5)
```



## Logical {#sec-logical}

Logical data type are also referred to as Boolean values. Logical includes `TRUE`, `FALSE` and `NA` which means *Not Available*.

```{r}
class(TRUE)
class(NA)
class(FALSE)
```

In [Chapter @sec-comp], we saw that comparison operators always returns a logical operator as their result. We can also check the type as it is evaluated.

```{r}
class(5 > 2)
```
`5 > 2` is first evaluated which returns `TRUE`, then the `class()` of the result is checked which returns `TRUE`. In R, the deepest of the nested expressions are evaluated first and evaluated outwardly to the umbrella expression. We can also check for a logical value using `is.logical()`

```{r}
is.logical(20 < 3)
is.logical(NA)
```

## Complex
We will not use the complex data type and its unlikely to analyze these type of data. Complex data types are numbers with an imaginary term `i` added to them

```{r}
5i
1 + 5i

typeof(3i)
typeof(5 + 2i)
```
Similar to other data types, we can confirm if a data is a complex by using `is.complex()`
```{r}
is.complex(5i)
```


## Changing Data Types

In R we can change data types using `as._` similar to `is.` which is used to check a data type.

```{r}
tree_height <- 20:40
tree_height

typeof(tree_height)
```
The above can be changed to a double using `as.double()` and back to integer using `as.integer()`

```{r}
tree_height_2 <- as.double(tree_height)
typeof(tree_height_2)
```

We can also change characters to factors and factors to characters in a similar way
```{r}
#| label: changing-data-types

tree_names <- c("terminalia", "eucalyptus", "iroko", "oak")
class(tree_names)
```

To change the above to factor data type we'll use the `as.factor()` function.

```{r}
tree_names_fct <- as.factor(tree_names)

class(tree_names_fct)
```

We can change this back to character by using `as.character()`.

```{r}
tree_names_chr <- as.character(tree_names_fct)
class(tree_names_chr)
```

`as.character()` can be used to coerce any data type to a character

```{r} 
tree_height
class(tree_height)
```


```{r} 
tree_height_chr <- as.character(tree_height)
class(tree_height_chr)
```

Characters can be changed back to numeric or double data type using the `as.double()`, `as.integer()` or `as.numeric()` function. The functions will return numbers only if what is been converted contains only digits, else NA is returned as the result. we get a warning when there's not a digit in the object being converted.

```{r}
tree_height <- c(10, 15, 20, "25m")
tree_height
class(tree_height)
tree_height <- as.double(tree_height)
tree_height
class(tree_height)
```

we can also convert factors to integers. As said in [ -@sec-fcts], factors are built on integers.

```{r}
fruits <- factor(c("orange", "tomato", "olive"))
class(fruits)
as.integer(fruits)
```

We can also convert other data types to logical data type. All other numbers evaluate to TRUE either if they are positive or negative except zero which evaluates to zero.
```{r}
as.logical(c(1, 0, -1, 3, 0, 0 , 32))
```

For characters, every other thing converts to NA, except **T**, **TRUE**, **True**, and **true** which converts to `TRUE` and **F**, **FALSE**, **False** and **false** which converts to `FALSE`
```{r}
as.logical(c("TRUE", 1, 0, "FALSE", "F", "T", 3, "False", "man", "true", "tRUE", "True", "t"))
```

::: callout-note
Data coercion/conversion can either be implicit or explicit. Coercion is explicit when we intentionally change the variable type. Implicit coercion is when R changes the variable type for us automatically. 
:::

## Other Data Types
There are other data types not covered such as:

-   Date
-   POSIXct
-   Raw

## Recommended Reading
  [Chapter 3 of Advanced R by Hadley Wickham, 2019](https://adv-r.hadley.nz/vectors-chap.html) gives in-depth understanding of the data types in R.

  [Hands-On Programming with R by Garret Grolemund](https://rstudio-education.github.io/hopr/r-objects.html) explain the concepts of R in a game-like approach using deck of cards.

## Summary {.unnumbered}

Data types in R include character, factor, double, integer, and logical. This data type can be checked using `class()`,  `typeof()` and their adjoining `is._` function. These data types can be converted from one type to another using `as._`.
