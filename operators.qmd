# Operators in R {#sec-operators}

Understanding the basic syntax of R is essential for performing complex operations. Basic operations in R include arithmetic operations such as, addition, and subtraction, comparison operations which involves the use of conditionals to check how object compares against one another.

## Arithmetic Operators
Operations such as addition, subtraction, multiplication and so on, are easy to execute in R. The arithmetic operators are given below:

|Operator|Definition|
|:----|----:|
|+|Addition|
|-|Subtraction|
|*|Multiplication|
|/|Division|
|^|Exponent or Power|
|**|Exponent or Power|
|%%|Remainder division|
|%/%|Integer division|

: Arithmetic operators in R {#tbl-arith-op .striped .hover}


Run the following commands in your console:

```{r}
#| label: arithmetic-operation
2 + 1
3 - 1
4 * 2
15 / 5
3 ^ 2
3 ** 2
```
The above operations are straightforward. `%%` operator returns the remainder when two numbers are divided. While `%/%` returns the whole number or integer and discard the remainder.

```{r}
5 %% 3
5 %/% 2
```

R performs arithmetic easily and also follows the order of operations.

```{r}
5 * 15 + 14 / 7
```

The order of operation here is division, `14 / 7 = 2`,  followed by multiplication, `5 * 15 = 75`, then addition of the values from the former operations `75 + 2` which is evaluated to give a total of 77. To avoid confusion, a convenient way to go about how you want your numbers to be evaluated is by using parenthesis **()** to block codes.

```{r}
3 + (5 - 2)

(5 * 4) / (7 - (2 + 4))
```


:::{.callout-tip apperance=simple}
Notice the spaces between numbers in arithmetic operations. While not required, spacing makes the code more readable. Don't be surprised that a lot of times you would try to figure out what you have done and also why you did particular thing. Also, if you work with in a team or want to share your work, people will be reading your codes.
:::

## Comparison Operators
Comparison operators are as their names imply. They are used to compare values. The result  from their operation is either TRUE or FALSE. TRUE and FALSE are logical value. You will get more information on this when we get to @sec-data-types in the next chapter.

Comparison operator in R include

| Symbol | Meaning |
| :--- | :--- |
| > |Greater than |
| < | Less than |
| == | Equal to |
| >= | Greater than or equal to |
| <= | Less than or equal to |
| != | Not equal to |

: Comparison Operators in R {#tbl-comp-operators .striped .hover}

Try these commands in R's console:
```{r}
4 > 5
(5^2) < (5 * 2)
10 >= 7
10 == 12
```

Multiple comparisons can be combined using operator `&` (and), `|` (or), and `!` (not).

### & (AND) operator
-   `&` returns TRUE when conditions on both sides of it are TRUE. All other conditions returns false


|Conditions|Result|
|:-------|-------:|
| TRUE & TRUE |TRUE|
|TRUE & FALSE|FALSE|
|FALSE & TRUE|FALSE|
|FALSE & FALSE|FALSE|

: & (And) operator conditions

```{r}
28 > 10 & 50 > 40
```


-   `|` returns TRUE when one of the conditions on both sides of it are TRUE.

```{r}
20 > 15 & 30 > 10
```
You can also use parentheses to enclose conditions when testing multiple conditions. The above condition can also be written as:

```{r}
(20 > 15) & (30 > 10)
```




## Assignment Operators

There are other operators which are useful in R. They are used to assign names to a variable or access elements of objects.

| Symbol | Meaning |
|:----|----:|
| <- | Assignment / bind to value |
|= | Assignment / bind to value |
|-> | Assignment / bind to value|
| $ | Access elements of objects |

: Other Operators in R {#tbl-ass .striped .hover}

For example, we can assign the number `17` to the variable `c`. `c` here is a container holding values.

```{r}
c <- 17
c
```

Above we assigned the value `17` to `c` using `<-`. This is the convention used for assigning objects to variables in R. We can change the value in `c` by assigning another value to it. This time let's assign the value 100 using the `=` operator
```{r}
c = 100
c
```

When we assign a different value to the same variable name in R, it gets replaced by the new value, thus a variable can only hold one value at a time. For `->` assignment variable, it comes after the value. For example:

```{r}
5000 -> d
d
```

:::{.callout-note appearnce=simple}
While `->` is an assignment operator in R that is not common. `<-` is the main operator used for assignment while `=` is common within functions. Following this simple guide ensure an organized code that is easy to follow.
:::

The `$` will be discussed in future chapters and it will be used in this book.

:::{.callout-note appearance=simple}
Variables are objects that are used to store values.
:::

## Making Comments
There are times when we have lines written that we do not R to executes. These lines are regarded to as comments. Comments are essential for documenting code, making it easier to understand, especially for others or for future reference. The `#` is used to indicate a comment. Anything that comes after `#` are not executed by the program. For example

```{r}
x <- 15 # 15 here is in kg instead of g
# the line here is a comment
x
```


## Bringing it all together
We can perform simple operations with the operators covered recently. For example we can compare the average dry weight of different African tree species.

```{r}
# The dry weight in kg/m3
ekki <- 1065
moabi <- 860
obeche <- 380
iroko <- 660
```

We can get the difference between `ekki` and `obeche`, and between `iroko` and `moabi`.

```{r}
ekki - obeche
iroko - moabi
```
The command above translate to `1065 - 380` and `660 - 860`respectively. We can also use other operators on this variables.
```{r}
ekki < iroko
moabi < ekki
ekki > obeche
```


## Summary
In this chapter, you've been introduced to some basic R syntax and the operators. The operators are used for mathematical operations, such as addition, multiplication, and division to mention a few. We also saw other operators such as `<`, `<=`, `==`, `>=` and `>` for comparing values. Lastly, we saw the assignment operator used to store values into containers called variable. 

Now that we've got a good understanding of the basic syntax,  we will move on to learn the data types in R.