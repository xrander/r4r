# Packages {#sec-pkgs}

:::{.callout-caution appearance=minimal}
This section is still under development
:::
In @sec-fns we saw numerous functions being used. There are yet many functions in R that are not part of base R, created by the R community to assist with various analyses. This is similar to third-party mobile applications or software like WhatsApp, Signal and Telegram, which serve similar functions to the default SMS app on mobile devices. Of course they have extended capabilities like Video Call, read receipt, availability status, and so on. These mobile application are downloaded from Apple Store or Play Store. Packages in R are similar to this and are hosted by [CRAN](https://cran.r-project.org/). A popular package in the R community is the `tidyverse` metapackage, which is a collection of multiple packages such as `dplyr`, `ggplot2` and so on. We will use the tidyverse for most part of this training. 

:::{.callout-note}
To see the statistics of downloaded R packages can be found check [here](https://www.datasciencemeta.com/rpackages).
:::
## Installing Packages in R
Installing packages in R requires an internet connection. To install packages use the command `install.packages()`.

```{r}
#| eval: false

# installing the tidyverse package
install.packages("tidyverse")
```

The command above downloads the package from CRAN's repository.

## Making Use of Downloaded Package
You can make use of packages you install by:
-   Using the `library` function,
-   Declaring packages in use.


### Using the Library Function
```{r}
#| eval: false
library(tidyverse)
```

If you see an error like:

> `Error in library(tidyverse) : there is no package called 'tidyverse'`

it means the package is not installed, and you should install it using `install.packages(tidyverse)`.

### Declaring Packages in Use
Sometimes we only need a function from a package and not the whole thing. In such scenario we do not need to load the package but declare it once. Declaring packages is also important important when you have packages with conflicting function/object names, explicit declaration of package in such scenario ensures you get the result you want. For example, the `dplyr` and the `stats` package both have the function lag() and filter().
```{r}
#| label: declaring-package
#| eval: false

stats::lag()
dplyr::lag()
```

:::{.callout-important appearance=minimal}
For every R session you have to load the package you want to use. Installation of packages only needs to be once.
:::

## Summary {.unnumbered}
Here, we introduces R packages as essential tools developed by the R community, similar to third-party mobile applications with extended functionality beyond standard options. R packages, hosted on CRAN, enable users to perform diverse analyses in R.

To install packages, use install.packages(), which downloads the package from CRAN, requiring an internet connection. Once installed, you can load a package using library() to access its functions. Alternatively, specific functions from a package can be called directly without loading the full package, which is helpful when different packages contain functions with the same names.

**A reminder**: loading packages must be repeated each session, while installation only needs to happen once.