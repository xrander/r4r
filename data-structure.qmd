# Data Structure {#sec-data-structures}

:::{.callout-caution}
Still under construction.
:::

In the @sec-data-types, we learned about different data types in R such as double, integer, character, and logical. Just as we organize physical items, and organize our personal space - our data needs special containers to organize and store different types of data. These containers are called **data structures**. 

Each data structure in R has specific characteristics:

- What types of data can it hold? ***single or multiple types***
- How are the data organized? ***one-dimensional, i.e., having a single dimension, two-dimensional, i.e., having x or y axis or multidimensional, having more than two axis.***
- How can we interact with the data inside the object? ***using `[]` or` $`***

Before exploring the different data structures, we have three functions that can help us understand the data structure. `length()` tells us the number of elements we have in one dimensional data structures, `dim()` tells us the number of rows and columns in a multidimensional data structure. Lastly, we have `str()` which gives information about the number of rows and columns, and the underlying data types for the columns with preview.


## Atomic Vectors

### What is an Atomic Vector?
We've actually worked with atomic vectors, and we have been working with them since the start of this book. An atomic vector is the simplest data structure in R [@grolemund2014hands]. Think of it as a one-dimensional data that can hold only one type of data. Honestly, the different data types are actually atomic vectors. The simplest for of atomic vectors is the scalar vector which contains only one element.

```{r}
# Single Vector
fruit <- "papaya"

fruit
```

We can make our vectors longer using `c()`.

```{r}
# Multivalue vector
fruits <- c("papaya", "orange", "apple", "pineapple", "grape",
            "strawberries", "avocado")

fruits
```


Since both `fruit` and `fruits` have one dimension we can use `length()` to get their number of elements.
```{r}
length(fruit) # shows the number of element(s) in fruit
length(fruits) # shows the number of element(s) in fruits
```


Atomic vectors can only hold one data type at a time. In the example below, we created a new object of double data type, then combine it with the `fruits` object which we created earlier. Checking the data type of the new object `new_data`, only a the character data type is returned.

```{r}
#| label: vector-hold-single-data-type
set.seed(123)
diameter <- round(rnorm(10, mean = 23.5, sd = 0.6), 2)
typeof(diameter)

new_data <- c(fruits, diameter)
new_data
typeof(new_data)
```


### Vector Operations

Simple operations like addition, subtraction, multiplication, division, and so on, are the operations that can be performed on vectors. We can also use functions on them as shown in [Chapter @sec-fns].

```{r}
# Arithmetic Operation
x <- 15
y <- 20
y + x
y %% x
y / x
```


Working with different data types that doesn't mix well could be the only stumbling blocks in these simple operations. 

```{r}
#| error: true

"man" * 5
```
:::{.callout-note}
In general character and numeric data types don't mix, logical mixes with all data types.
:::

### Accessing Vector Elements
To access a value in a vector we can get it with its index number. Indexing allows us access, slice, subset or modify specific elements in different data structures. We use the square brackets [] to specify the index position of elements we are interested in. The index position starts with 1, the index position of elements in `fruits` is show in @fig-index.

![Index number of `fruits` vector](images/index-pos.png){#fig-index width=80% fig-align="center"}

To get the first element *papaya* in the `fruits` vector, we specify its index position. As seen in @fig-index, the index of *papaya* is 1 in this case.


```{r}
fruits[1]
```

To return multiple values at the same time, we combine those values with `c()` and pass it to the square brackets. To return *avocado*, *grape*, and *orange*, we select them by index position. 

```{r}
# select elements by specific position
fruits[c(7, 5, 2)]
```

 We can also select a range of elements using `:`. To select elements from *orange* to *grape*, we do the following:
```{r}
# select the range of elements that fall within that number.
fruits[2:5] 
```

### Modifying Vectors

There are two ways to modify new elements in a vector:

- `append()` function
- The square bracket `[]`

##### The `append()` Function
We can use `append()` to add elements to a vector. The elements are usually added to the end of the vector. `append()` takes three arguments, **x**, the vector that you want to add a value(s) to, **values**, the new value(s) you want to add to the vector, and **after**, which determines the index position where you want the new value(s) slotted into.

```{r}
append(x = fruits, values = "banana", after = 5) # adding new value in index position 5
```

Multiple values can be added when they are combined with `c()`. If the `after` argument is left empty, the new values are automatically placed at the end of the vector.

```{r}
new_fruits <- c("kiwi", "grape", "cherry", "mango", "peach")
append(fruits, new_fruits)
```

##### Using the Square Bracket `[]`

To add a new value using the square bracket you have to assign the value to the index position you want the new value to occupy.
```{r}
fruit[2] <- "mango" # add new element to a new index number
fruit
```
If you insert an index that is more than the very next index number, you get the index positions filled with `NA` until the position you specified. 
```{r}
fruit[5] <- "Clementine"
fruit
```
To prevent this, you can use a simple trick. Simply pass the length of the fruit + 1 into the square bracket when you want to add a new value to the last position.
```{r}
fruit[length(fruit)+1] <- "Guava"
fruit
```
You can also remove elements of a vector using the square bracket. You do this by passing a negative value into the index number

```{r}
fruit[-4] # Show values left after removing first value.
fruit <- fruit[-1] # Reassign to variable to confirm the change.
fruit
```

The square brackets is also used to change the values of object using their index position. 

```{r}
fruit[3] # Position to be changed
fruit[3] <- "tomato" # Replace avocado with tomato
fruit # new elements
```
Multiple positions can also be changed by using `c()` or using `:` for a sequence of index position.
```{r}
fruit[2:3] <- c("cayenne", "pomegranate")
fruit
```

:::{.callout-note}
Using `[]` offers more flexibility than `append()`, as it can be used to add, change and remove the elements of a vector.
:::


#### Recycling
There are instances where we perform operations such as converting from one unit to the other. In the case where our recorded values are more than one, which is usually the case, we would like to convert all of them with a single value. For example: An experiment is designed to evaluate the impact of various feed formulations on the weight gain and overall health of pigs, with the objective of selecting the optimal diet for a new litter to maximize growth and well-being. The weights of 40 pigs that have been administered `feed_x` for 3 months is given below.

```{r}
#| label: weight simulation for a feed
set.seed(123)
feed_x <- round(rnorm(n = 40, mean = 87000, sd = 10000), 2)
feed_x
```
The value gotten was recorded in grams and we prefer the kilogram. To do this, we simply divide by a 1000
```{r}
feed_x_kg <- round(feed_x / 1000, 2)

feed_x_kg
```
This is possible because the operation is carried out element-wise, and a phenomenon called **vector recycling** is happening. In vector recycling, vectors of shorter length are repeated multiple times to match up with longer vectors. As long as the longer vector is a multiple of the short vector, we get no warning message as we have below. 

```{r}
feed_x_kg * c(0.1, 0.5)
```
If the longer vector is not a multiple, we get a warning message and the result gets computed regardless, but there will be a cut off in operation.

```{r}
feed_x_kg / c(0.3, 0.3, 0.4)
```

:::{.callout-note}
While recycling can be useful, it can also leads to wrong results, so ensure you check if there are warnings and your results are as expected.
:::


## Matrices

### What is a Matrix?
A matrix is a two-dimensional data structure that holds elements of the same data type arranged in rows and columns. Think of it as a calendar with with just numbers. To create a matrix, use the `matrix()` function. Since it is two dimensional, you have to specify the number of rows and columns you want. You can specify the number of rows with `nrow` and the number of columns with `ncol`.

```{r}
mat <- matrix(1:6, nrow = 2, ncol = 3)
mat
```
If you use only one of `nrow` or `ncol`, the other gets filled automatically. For example we can create a simple calendar month.

```{r}
my_calendar <-  matrix(1:30, ncol = 7)
my_calendar
```

The calendar looks weird and that's because the numbers are usually filled by columns. To change this arrangement, set the `byrow` to TRUE

```{r}
my_calendar <- matrix(1:30, ncol = 7, byrow = TRUE)
my_calendar
```

Now this looks more like a calendar. But an incomplete calendar, we need the names of the day, and also the week numbers. We will get to this in the next section, but let's address something else which you will come across a lot. That is creating matrix from vector objects. We make a matrix from a vector by passing it to the `matrix()` function and giving a value to either of `nrow` or `ncol`.

```{r}
fruit_mat <- matrix(fruits, nrow = 4) # make matrix from fruits vector
fruit_mat
```

To get the dimension of matrix use `dim()` function.
```{r}
dim(fruit_mat)
```
The result `[1] 4 2` is interpreted 4 by 2, i.e. four rows and two column. That matrix is thereby called a `4` by `2`. The object `my_calendar` is having `{r} dim(my_calendar)[1]` rows by `{r} dim(my_calendar)[2]` columns, that makes it a 5 by 7 matrix

#### Naming Rows and Columns

A property of matrix is being two dimensional. From the current result of the calendar, we have [1,] and [,1] signifying rows and columns respectively. These numbers are the column and row indices of a matrix and they can replaced with names of our choosing using the `colnames()` and `rownames()` functions.

```{r}
colnames(my_calendar) <- c("Mon", "Tues", "Wed", "Thurs", "Fri", "Sat", "Sun")

rownames(my_calendar) <- paste("Week", 1:5)

my_calendar
```
Now `my_calendar` looks more like a calendar.

### Matrix Operations

Similar to vectors, matrix can perform arithmetic operations. For arithmetic with scalar vector, the operation is carried on each element of the matrix.

```{r}
my_mat <- matrix(1:6, nrow = 3)
my_mat
my_mat * 5
my_mat - 15

my_mat2 <- matrix(2:7, nrow = 3)
my_mat2 / my_mat
```

Matrix with unequal dimension cannot be added together
```{r}
#| error: true


my_mat3 <- matrix(7:15, nrow = 3)
my_mat3
my_mat3 + my_mat
```




### Accessing Elements in a Matrix
Like with vectors, you can access any particular element in a matrix using the square brackets, `[]`. Since matrix is two dimensional, there's a little adjustment in how we access elements as we have to specify rows and columns. The syntax is **[row_index, column_index]**. For example, let's access the third row and second column element of `fruit_mat`.
```{r}
fruit_mat
fruit_mat[3, 2]
```
We can also access more than one element of a particular axis (row and column) by passing in a vector.
```{r}
fruit_mat[c(1, 3, 2), 1] # This returns row 1, 3, and 2 elements of column 1
fruit_mat[2, c(1, 2)]
```

You can also use `:` within an axis to access elements within a range
```{r}
fruit_mat[2:4, c(1, 2)] # returns row 2, 3, and 4 element of column 1 and 2.
```

To return all the rows of a particular column, leave the row space within the square bracket empty, and specify the index of the column you want to return
```{r}
fruit_mat[,1]
fruit_mat[,2]
```

To return all the columns of a particular row, the column space is left empty.
```{r}
fruit_mat[3:4, ] # returns element of row 3 and 4 for all the columns.
```


You can also access an element using the row and column names.
```{r}
my_calendar["Week 2", ]
```

### Adding New Element to a Matrix
To add new columns to a matrix use `cbind()` and to add rows use `rbind()`. We'll create a new matrix of fruits to show this .
```{r}
new_fruit_list <- matrix(c("raspberry", "blue berries", 
                           "kiwi", "clementine"),
       nrow = 4)

new_fruit_list

fruit_list <- cbind(fruit_mat, new_fruit_list)
fruit_list
```
To prevent error when combining column-wise ensure the number of rows of the matrices to be joined are equal and the number of columns are equal when combining row-wise.

```{r}
rbind(fruit_list, c("avocado", "pear", "lemon"))
```
 
### Transposing Matrix

Transposing matrix is done using `t()`. This flips row elements to columns and column elements to rows.
```{r}
fruit_mat_transposed <- t(fruit_mat)
fruit_mat_transposed
dim(fruit_mat_transposed)
```


## Data frames

### What is a Data Frame

Data frames are two-dimensional like matrix and are one of the most common way to store data. They are similar to Excel spreadsheets in how they look. What makes data frames different from matrix is their ability to store different data types. To create a data frame, we use the `data.frame()` function.

```{r}
data.frame(
  x = 1:10,
  y = letters[1:10],
  z = month.abb[1:10]
)
```


Data frames can combine vectors into a table where each vector becomes a column. The vectors to be used have to be of the same length to avoid error. 

```{r}
fruit <- c("orange", "mango", "apple")
stock <- c(5, 3, 0)
available <- c(TRUE, TRUE, FALSE)

fruit_tbl <- data.frame(fruit, stock, available)
fruit_tbl
```

### Accessing and Modifying Elements in a Data Frame
Elements in data.frame are accessed in a similar fashion as matrix with an extra tweak of their columns being accessible using the dollar sign `$`. Using the dollar sign returns the columns as a vector.

```{r}
fruit_tbl$stock
```

When accessing a column with its name and the square bracket, it's not necessary to include the comma when the name is in quotation marks. The column with the specified name will be returned. This is also the same when you use index number, once a comma is not included, the column is automatically returned

```{r}
#| label: accessing-elements-data-frames
#| layout-ncol: 2
#| tbl-cap: Accessing elements in a data frame

fruit_tbl["stock"]
fruit_tbl[2]
```


You can still use the commas to return specific rows and columns if you choose to, or return a particular observation as shown below:
```{r}
fruit_tbl[2, 3]
```

Using the square brackets, and index number of the column we want to remove, we can remove old columns or add new columns to a data frame.
```{r}
# Removing a Column
fruit_tbl[-1]

# Adding a column
fruit_tbl["location"] <- c("online", "on site", "online")
fruit_tbl

```

## List
### What is a List
A list is a versatile data structure that can store elements of different types and sizes - including other data structures like vectors, matrices, and even other lists. Think of it like a container that can hold different kinds of boxes.


```{r}
# Basic list creation
my_list <- list(
  fruits,
  fruit_mat,
  c(TRUE, FALSE),
  FALSE, 
  fruit_mat_transposed,
  fruit_tbl,
  my_calendar
)

my_list
```


### Naming Objects in a List
The objects in a list can be given a name using `names()` function.
```{r}
names(my_list) <- c("fruits", "fruit_mat", "logical_1", "logical_2",
                    "fruit_transposed_matrix", "fruit_dataframe", "my_calendar_matrix")
```
On printing list now, we'll see each object named.
```{r}
my_list
```


### Accessing Elements in a List
The square bracket, **[]** is used to select elements in a list but to print the items in the object you use **[[]]**. Like data.frame you can also use the dollar sign, **$**,
```{r}
my_list[1]
```

Notice the difference when we use **[[]]**. The result is similar to using $ to access the objects within the list
```{r}
my_list[[1]]
my_list$fruits # similar to [1]
```

To access the item in each object add a square bracket in front.

```{r}
my_list[[1]][3]
```

:::{.callout-tip}
To confirm an object data structure, use their `is.*()` variant. For vectors, `is.vector()`, for matrix, `is.matrix()` and so on. To convert from one structure to another, use their `as.*()` variant. For vector `as.vector()`, for matrix, `as.matrix()` and so on.


```{r}
is.vector(my_calendar)
is.vector(fruits)
is.matrix(my_calendar)
as.data.frame(my_calendar)
```
:::

## Bringing it all together

## Summary
In this chapter you learned about data structures in R. You saw how to create each data structure, how to access the elements of each structure. Also, you learned how to add and remove items from each data structure. You got introduced to checking the properties of each data structure such as their length and dimensions. Next you will learn about packages in R and how to install them, after you will bring together the knowledge you've gathered from chapter one into making R Scripts and R projects.

