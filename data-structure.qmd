# Data Structure {#sec-data-structures}

:::{.callout-caution appearance=minimal}
This section is still under development
:::

In the @sec-data-types, we learned about different data types in R (numbers, text, logical values, etc.). Just as we organize physical items - R needs special containers to organize and store different types of data. These containers are called data structures. 

Each data structure in R has specific characteristics:

- What types of data it can hold (single or multiple types)
- How it organizes the data (one-dimensional, two-dimensional, etc.)
- How we can interact with the data inside it

Before exploring each data structure, we can use these functions to inspect any container:

- `length()`: Shows how many elements are stored
- `dim()`: Shows the dimensions (rows and columns)
- `str()`: Displays the structure and contents in detail


## Atomic Vectors

### What is a Vector?
An atomic vector is the simplest data structure in R. Think of it as a single row or column that can hold only one type of data. To create vectors we can pass 

```{r}
# Single Vector
fruit <- "papaya"

fruit
```

To combine multiple values to an object, use `c()`.

```{r}
# Multivalue vector
fruits <- c("papaya", "orange", "apple", "pineapple", "grape",
            "strawberries", "avocado")

fruits
```

To get the number of elements in an object use `length()`.
```{r}
length(fruit) # shows the number of elements in fruit
length(fruits) # shows the number of elements in fruits
```

Next we will see the different operations such as slicing, subsetting and so on which we can perform on vector objects. 

### Vector Operations

#### Basic Operation
Simple operations like addition, subtraction, multiplication, and other arithmetic are part of the operations that can be performed on vectors.

```{r}
# Arithmetic Operation
x <- 15
y <- 20
y + x
y %% x
y / x
```
When the length of vectors is greater than one, element-wise operations can be performed on them. Each element in the longer object will be operated on by the short one. When we have objects with more than one element, the elements are operated on one-to-one if they are divisible without remainder. If the division is with remainder, we get a warning about the vectors not being multiples. Although this does not stop the operation, the operation gets recycled with the short-length object operating on the longer one with its first element. This phenomenon of starting the operation again in R is called `vector recycling`.

```{r}
#| warning: true
# Vector recycling
a <- 1:5 # Creates vector of 1, 2, 3, 4, 5
b <- 2
c <- 7:9 # Creates vector of 7, 8, 9

a + b
a / b
a / c
```
:::{.callout-note appearance=simple}
When operating on vectors of different lengths, R will "recycle" the shorter vector's values to match the longer vector's length. This can be useful but also dangerous if not used carefully!
:::

### Accessing Vector Elements
To access a value in a vector we can get it via its index. Indexing allows us access or modify specific elements in different data structures. We use the squared-brackets [] to index the position of elements. To get the first element in the `fruits` vector, *papaya*, we specify its index position, 1, within the squared brackets.

| Vector | papaya | orange | apple | pineapple | grape | strawberries | avocado |
|:------:|:------:|:------:|:-----:|:---------:|:-----:|:------------:|:-------:|
| Index number | 1 | 2 | 3 | 4 | 5 | 6 | 7 |

: Index number of fruit vector {#tbl-index}

```{r}
fruits
fruits[1]
```

To return multiple element we can include the elements index position within `c()` and pass it to the squared brackets. You can return a ranged of elements using `:`.

```{r}
# remove elements by specific position
fruits[c(7, 5, 2)] 
# remove the range of elements that fall within that number.
fruits[2:5] 
```


### Modifying Vectors

#### Adding Elements to a Vector
There are two ways to add new elements to a vector. First, use the `append()` function
```{r}
fruits <- append(fruits, "banana") # adding new element
length(fruits) # The number of elements have increased by one.
fruits # The new elements
```
Secondly, assign the new value to a new index number
```{r}
fruit 
fruit[2] <- "mango" # add new element to a new index number
fruit
```

#### Altering Elements in a Vector
Vectors are altered using the index number of the element to be changed.
```{r}
fruits[7] # Position to be changed
fruits[7] <- "tomato" # Replace avocado with tomato
fruits # new elements
```

#### Removing Elements in Vectors
Subtract out the element to be removed from a vector with it's index number.
```{r}
fruits[-1] # Show values left after removing first value.
fruits <- fruits[-1] # Reassign to variable to confirm the change.
```

:::{.callout-tip appearance=simple}
To confirm an object data structure, use their `is.*()` variant. For vectors, `is.vector()`, for matrix, `is.matrix()` and so on. To convert from one structure to another, use their `as.*()` variant.
:::

## Matrices
### What is a Matrix?
A matrix is a two-dimensional data structure that holds elements of the same type arranged in rows and columns. Think of it as a table with uniform data type. To create a matrix, use the `matrix()` function. Within the function, specify the number of rows, `nrow` or number of columns `ncol`

```{r}
mat <- matrix(1:6, nrow = 2)
mat
```
The number in the matrix get filled by columns. To change this arrangement, set the `byrow` to TRUE

```{r}
matrix(1:6, nrow = 2, byrow = TRUE)
```

We can confirm if the object is a matrix by using `is.matrix()`

```{r}
is.matrix(mat) # confirm object is a matrix
```

You can make a matrix from a vector by passing it to the `matrix()` function.

```{r}
fruit_mat <- matrix(fruits, nrow = 4) # make matrix from fruits vector
fruit_mat
```

To get the dimension of matrix use `dim()` function.
```{r}
dim(fruit_mat)
```
The result `[1] 4 2` is interpreted 4 by 2, i.e. four rows and two column. That matrix is thereby called a four by two matrix. Check @fig-mat-index to see an example.

![matrix indexing, source: https://biocore.crg.eu](https://biocorecrg.github.io/CRG_RIntroduction/images/matrix_indices.png){#fig-mat-index}

For example,  @fig-mat-index shows indexing for a simple 3 * 2 matrix.

### Matrix Operations
#### Basic Operations
Similar to vectors, matrix can perform arithmetic operations. For arithmetic with scalar vector, the operation is carried on each element of the matrix.

```{r}
my_mat <- matrix(1:6, nrow = 3)
my_mat
my_mat * 5
my_mat - 15

my_mat2 <- matrix(2:7, nrow = 3)
my_mat2 / my_mat
```

Matrix with unequal dimension cannot be added together
```{r}
#| error: true


my_mat3 <- matrix(7:15, nrow = 3)
my_mat3
my_mat3 + my_mat
```


#### Naming Rows and Columns
A property of matrix is being two dimensional. From the result printed above, we have [,1] and [1,] signifying rows and columns. These are the column and row indices of a matrix and they can replaced with names of our choosing. Using the `colnames()` and `rownames()` functions, the names of columns and rows of a matrix can be changed respectively.

```{r}
# represent column names with values a and b
colnames(fruit_mat) <- letters[1:2] 

fruit_mat
# represent the row names with uppercase A, B, C, and D
rownames(fruit_mat) <- LETTERS[1:4] 

fruit_mat
```

### Accessing Elements in a Matrix
Like with vectors, you can access any particular element in a matrix using the squared brackets, **[]**. Since matrix is two dimensional, there's a little adjustment in how we access elements as we have to specify rows and columns. The syntax is **[row_index, column_index]**. For example, let's access the third row and second column element of `fruit_mat`.
```{r}
fruit_mat
fruit_mat[3, 2]
```
We can also access more than one element of a particular axis (row and column) by passing in a vector.
```{r}
fruit_mat[c(1, 3, 2), 1] # This returns row 1, 3, and 2 elements of column 1
fruit_mat[2, c(1, 2)]
```

You can also use `:` within an axis to access elements within a range
```{r}
fruit_mat[2:4, c(1, 2)] # returns row 2, 3, and 4 element of column 1 and 2.
```

To return all the rows of a particular column, leave the row space within the squared bracket empty, and specify the index of the column you want to return
```{r}
fruit_mat[,1]
fruit_mat[,2]
```

To return all the columns of a particular row, the column space is left empty.
```{r}
fruit_mat[3:4, ] # returns element of row 3 and 4 for all the columns.
```


You can also access an element using the row and column names.
```{r}
fruit_mat["A", "a"]
```

### Adding New Element to a Matrix
To add new columns to a matrix use `cbind()` and to add rows use `rbind()`. We'll create a new matrix of fruits to show this .
```{r}
new_fruit_list <- matrix(c("raspberry", "blue berries", 
                           "kiwi", "clementine"),
       nrow = 4,
       dimnames = list(letters[1:4], "C"))

new_fruit_list

fruit_list <- cbind(fruit_mat, new_fruit_list)
fruit_list
```
Ensure the number of rows of the matrices to be joined matches when performing a column bind and the number of columns matches when performing a row bind.

```{r}
rbind(fruit_list, c("avocado", "pear", "lemon"))
```
 
### Transposing Matrix
Transposing matrix is done using `t()`. This flips row elements to columns and column elements to rows.
```{r}
fruit_mat_transposed <- t(fruit_mat)
fruit_mat_transposed
dim(fruit_mat_transposed)
```


## Data frames
### What is a Data Frame
Data frames are two-dimensional like matrix and are the standard way to store data. They are similar to Excel spreadsheets. What makes them different from matrix is their ability to store different data types. To create a data frame, use the `data.frame()` function. Below is a simple data frame that stores the inventory of a fruit in a store.
```{r}
fruit_inventory <- data.frame(
  type = c("pineapple", "mango", "apple"), # character data type
  stock = c(5, 3, 0), # double data type
  available = c(TRUE, TRUE, FALSE) # logical data type
)

fruit_inventory
```

Data frames can combine vectors into a table where each vector becomes a column. The vectors to be used have to be of the same length to avoid error:
```{r}
fruit <- c("orange", "mango", "apple")
stock <- c(5, 3, 0)
available <- c(TRUE, TRUE, FALSE)

fruit_tbl <- data.frame(fruit, stock, available)
fruit_tbl
```
### Accessing and Modifying Elements in a Data Frame
Elements in data.frame are accessed in a similar fashion as matrix. Data frames also uses the dollar sign, `$` to access columns.

```{r}
fruit_tbl$stock
fruit_tbl$available
```

You can apply operations you want on each variable this way. For example we can check the total stocks available.

```{r}
sum(fruit_tbl$stock)
```

Using the square brackets, and index number of the column we want to remove, we can remove old columns or add new columns to a data frame.
```{r}
# Removing a Column
fruit_tbl[-1]

# Adding a column
fruit_tbl["location"] <- c("online", "on site", "online")
fruit_tbl

```

## List
### What is a List
A list is a versatile data structure that can store elements of different types and sizes - including other data structures like vectors, matrices, and even other lists. Think of it like a container that can hold different kinds of boxes.


```{r}
# Basic list creation
my_list <- list(
  fruits,
  fruit_mat,
  c(TRUE, FALSE),
  FALSE, 
  fruit_mat_transposed,
  fruit_tbl
)

my_list
```


### Naming Objects in a List
The objects in a list can be given a name using `names()` function.
```{r}
names(my_list) <- c("fruits", "fruit_mat", "logical_1", "logical_2",
                    "fruit_transposed_matrix", "fruit_dataframe")
```
On printing list now, we'll see each object named.
```{r}
my_list
```


### Accessing Elements in a List
The squared-bracket, **[]** is used to select elements in a list but to print the items in the object you use **[[]]**. Like data.frame you can also use the dollar sign, **$**,
```{r}
my_list[1]
```

Notice the difference when we use **[[]]**. The result is similar to using $ to access the objects within the list
```{r}
my_list[[1]]
my_list$fruits # similar to [1]
```

To access the item in each object add a square bracket in front.

```{r}
my_list[[1]][3]
```


## Summary
In this chapter you learned about data structures in R. You saw how to create each data structure, how to access the elements of each structure. Also, you learned how to add and remove items from each data structure. You got introduced to checking the properties of each data structure such as their length and dimensions. Next you will learn about packages in R and how to install them, after you will bring together the knowledge you've gathered from chapter one into making R Scripts and R projects.
