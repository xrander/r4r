# Functions {#sec-fns}

:::{.callout-tip}
This section is under review.
:::

In the previous chapters, functions such as `c()`, `as.factors()`, and `class()` to mention a few were used. But what exactly are functions, and why are they important? Functions in R are self-contained blocks of code designed to perform specific tasks.

Think of a function like a kitchen knife—its purpose is to cut, and how you use it depends on the task at hand. For example, the function `c()` stands for "concatenate" or "combine," and its role is to combine objects into a list or vector.

We use functions because they simplify our work and make analyses more efficient. If we make mistakes, functions allow for easy corrections and re-use. In R, function names are usually verbs, representing actions to be taken. Functions are named objects followed by parentheses. Inside these parentheses are arguments, which are the values passed to the function to control how it operates and the type of result it returns.

Just like how a knife can cut onions in different ways—rings, half-moons, juliennes, dice, or rough chops—arguments allow us to specify the exact type of result we want from a function. Each variation produces a different output, but the underlying tool (the function) remains the same.

As an example, let's take an hypothetical tomato nursery experiment. In this experiment, we get some tomato fruit and measure their diameter. To record the diameter, we use the concatenation, `c()` function.

```{r}
tomato_diameter <- c(43.68, 70.23, 29.31, 83.08, 27.42, 53.50, 30.95, 10.51, 41.41, 68.06)
```

There are two ways to see the diameter collected. The first is using the `print()` function

```{r}
print(tomato_diameter)
```

The other option is by calling the object. This automatically print the result. It's more common you see people do this than using the `print()` function, although, `print()` is still used a lot.

```{r}
tomato_diameter
```

## Some Built-in Functions
There are a lot of functions readily loaded in R to equip you for the analysis tasks you want to undertake. For tasks that R built-in function can't handle, you can install packages (covered in [Chapter @sec-pkgs]) or build your own, covered in [ -@sec-cust-fns]. The various built-in functions are designed to perform specific tasks on the various data types. There are some designed to work with files and folders as well.
For examples, you may want to know the total number of values we have in our record, that is the count. You can do this with `length()`.
```{r}
length(tomato_diameter)
```


To find the average of the records of tomato_diameter use `mean()`.

```{r}
mean(x = tomato_diameter)
```
The above can also be written as 
```{r}
#| eval: false
`mean(tomato_diamter)`
```

`x` here is the keyword argument that the function takes and in this case is the data *tomato_diameter*. To know more about any function use the function `help()` or type a question mark followed by the question name. So we have `help(mean)` or `?mean`.

To check the median of the data use (you guessed it right) `median()`. We also have `sd()`, `var()`, and `cor()` for estimating the standard deviation, variance and correlation respectively.


```{r}
median(tomato_diameter)
sd(tomato_diameter)
var(tomato_diameter)
cor(tomato_diameter, 1:10)
```
Using functions such as `round()` you can round off the values of the recorded tomatoes diameter to the nearest whole number.
```{r}
round(tomato_diameter)
```
To specify the decimal place to round to, pass a number, which is ideally an integer or whole number to the argument `digits`.
```{r}
round(tomato_diameter, digits = 1)
# Also the same as
# round(tomato_diameter, 1)
```

To round up in a specific direction, either up or down, we have two variation of `round()`, `ceiling()`, to round up and `floor()` to round down.
```{r}
floor(3.544)
ceiling(3.544)
```

To create a sequence of number use the colon (`:`) symbol  and the `seq()` function. `seq()` gives more control on the sequence you want to generate. Important arguments of `seq` to remember are `from`, `to`, and `by`.
```{r}
seq(from = 1, to = 100, by = 1)
```
The above is also similar to the code below, using position of the arguments instead of writing the argument out. Writing in such a manner is common in the R community.
```{r}
#| eval: false
seq(1, 100, 1)
```

With the argument, `by`, we can create even and odd numbers easily.
```{r}
even_num <- seq(2, 100, 2)
even_num
```

R also comes with built-in constants such as `pi` 
```{r}
pi
```


### Making Graphs with the `plot()` Function
To see a graph of the *tomato_diameter* object, pass it to `plot()` function as the first argument `x`. `x` stands for x-axis, and a scattered plot graph is produced as shown in @fig-td. 
```{r}
#| label: fig-td
#| fig-cap: Graph generated for tomato diameters using `plot`
plot(x = tomato_diameter)
```
The graph can be customized by passing values into other arguments within the `plot()` function. Arguments such as `col` changes the color while `pch` changes the shape of each point, @fig-plot-cust. You can also use `hist()` to see the distribution of the data, @fig-td-hist.
```{r}

#| label: fig-plot-cust
#| fig-cap: |
#|    Simple plot customization: point shape changed to cross and color changed to red


plot(tomato_diameter, col = "red", pch = 3)
```

```{r}
#| label: fig-td-hist
#| fig-cap: Histogram of Tomato Plant Diameters (mm) showing a normal distribution
hist(tomato_diameter, col = "coral3", xlab = "Tomato Diameter", main = "Distribution of Tomato Plant Diameter")
```
The `xlab` argument is used to customize the label of the x-axis, while the y-axis is customized with `ylab`. The argument `main`, is used to change the title of the graph. More on how to make visualization with R will be discussed in [Chapter @sec-dataviz] and [Chapter @sec-edai].

The code used to produce the graph is clear, but as you write more complex codes, readability reduces. The code could improve by writing one or two arguments in a line rather than all in a line. The code above can also be written as:

```{r}
#| eval: false
hist(
  tomato_diameter,
  col = "coral3",
  xlab = "Tomato Diameter",
  main = "Distribution of Tomato Plant Diameter"
)
```

### Simulating Numbers
An important part of research is data simulation and R provides a robust set of functions for generating random numbers from different probability distributions. For example, the `runif()` function generates random numbers from a uniform distribution, `rnorm()` for the normal distribution, `rpois()` for the Poisson distribution, and `rbinom()` for the binomial distribution. These functions belong to a family that also includes functions for calculating density (**d**), distribution functions (**p**), quantiles (**q**), and random deviates (**r**) for various statistical distributions. A comprehensive list of these functions can be found in @tbl-distro-funs.

For example, to simulate the height of 100 *Tectona grandis* in a plantation with mean diameter of 25 cm and a deviation of 2.3 cm all of the same age use `rnorm()`. In forestry, the distribution of trees diameter in a plantation is usually a bell-shaped curve. With some codes you will generate such curve as @fig-dia-hist-2 while the distribution of the diameters represented as a histogram can be seen in @fig-dia-hist-1.
```{r}
teak_diameter <- rnorm(100, mean = 35, sd = 2.3)
teak_diameter
```

The numbers generated above will be different from that which you will produce and may never get the exact thing. This is because they are random numbers. The beauty of R is its reproducibility. Using `set.seed()` captures a specific number, a pseudorandom number and makes your work replicatable. Given that the seed number is the same, whatever pseudorandom numbers are produce can be replicated by another person.

```{r}
set.seed(123)
tree_diameter <- rnorm(100, mean = 25, sd = 12.3)
tree_diameter
```

```{r}
#| label: fig-dia-hist
#| fig-cap: Histogram of simulated tree diameter distribution
#| fig-subcap: true
#| layout-ncol: 2
#| echo: false

hist(
  tree_diameter,
  col = "springgreen3",
  xlab = "Diameter",
  main = "Histogram of Tree Diameter"
)

plot(
  density(tree_diameter),
  col = "chocolate3",
  xlab = "Tree Diameter",
  lwd = 4,
  lty = "dashed"
)
```
`runif()` is used to for generating number of a uniform distribution, @fig-hist-unif.
```{r}
set.seed(123)
dt <- runif(100, min = 10, max = 20)
dt
```

```{r}
#| label: fig-hist-unif
#| echo: false
#| fig-cap: Uniformly distributed randomly generated numbers.
hist(
  dt,
  xlab = "diameter",
  main = "Uniform distribution"
)
```

Other functions for generating random numbers according to distribution are:


|Function|Distribution|Description|
|:--------|:------------|:-----------|
|runif| Uniform distribution | Generates random numbers from a uniform distribution |
|rnorm| Normal distribution | Generates random numbers from a normal distribution |
|rpois| Poisson distribution | Generates random numbers from a poisson distribution |
|rbinom| Binomial distribution | Generates random numbers from a binomial distribution |
|dunif| Uniform distribution | Computes the density of a uniform distribution |
|dnorm| Normal distribution | Computes the density of a normal distribution |
|dpois| Poisson distribution | Computes the density of a poisson distribution |
|dbinom| Binomial distribution | Computes the density of a binomial distribution |
|punif| Uniform distribution | Computes the cumulative distribution function (CDF) of a uniform distribution |
|pnorm| Normal distribution | Computes the cumulative distribution function (CDF) of a normal distribution|
|ppois| Poisson distribution | Computes the cumulative distribution function (CDF) of a poisson distribution |
|pbinom| Binomial distribution | Computes the cumulative distribution function (CDF) of a binomial distribution |
|qunif| Uniform distribution | Computes the quantiles of a uniform distribution |
|qnorm| Normal distribution | Computes the quantiles of a normal distribution |
|qpois| Poisson distribution | Computes the quantiles of a poisson distribution |
|qbinom| Binomial distribution | Computes the quantiles of a binomial distribution |

: Functions for generating random numbers of data in R {#tbl-distro-funs tbl-colwidths="[10, 25, 65]"}

### Sampling with sample()
Another important function for randomization is using `sample()`. `sample()` is used for selecting values at random from a set of data. Let's take the example below:

```{r}
new_dt <- seq(1, 20, 2)
new_dt
```
We can randomly select five values from `new_dt` using `sample()`
```{r}
set.seed(10)
sample(new_dt, 5)
```

#### Weighted Samples and Sampling with Replacement
More than selecting values at random, with `sample()` we can also select with replacement by setting the value of the argument `replace` to `TRUE`. 
```{r}
sample(new_dt, 20, replace = TRUE)
```

The probabilities of the values we want to randomly select can also be determined by the `prob`. This is perfect for weighted probability. Example is a die of unequal prob.
```{r}
die <- 1:6
die_prob <- c(0.23, 0.23, 0.23, 0.21, 0.07, 0.03)
```

```{r}
set.seed(123)
die_selected <- sample(x = die, size = 100, replace = TRUE, prob = die_prob)
die_selected
```
To get the number of occurrence of each die face we can use the `table()` function. and notice that values with lower probability of occuring such as 5 and 6 were sampled less.
```{r}
table(die_selected)
```

### String Functions
Some functions in R makes it easy to work with strings. Let's create a simple string vector to begin.
```{r}
tree_1 <- " Adansonia digitata "
tree_1
```
We can count the number of characters in the object using `nchar()`. Know that `nchar()` also includes the spaces in the text.
```{r}
nchar(tree_1)
```
The data can be changed to lower cases by using `tolower`, and changed to upper cases by using `toupper`. Unfortunately, Base R does not provide a function to changed strings to title or sentence cases, but there are open source packages available to do this . You can explore [stringr](https://stringr.tidyverse.org/) by Hadley Wickham and [stringi](https://stringi.gagolewski.com/) by Marek Gagolewski which contains functions for such operation and other complex string manipulation operations in R.

```{r}
tolower(tree_1)
toupper(tree_1)
```
With `trimws()` you can remove the white spaces around your strings. As the name sound `trimws()` -- `trim white spaces`
```{r}
tree_1 <- trimws(tree_1)
tree_1
```
After trimming the white spaces, the number of characters would reduce.
```{r}
nchar(tree_1)
```
To extract certain aspect of your text, use `substring()`, or `substr()`. `substr()` takes the argument `x` which your data, `start` which is the integer for the first element of the text to be extracted or replaced, and `stop` which is the integer for the last element of the text to be extracted or replaced. For example, we can extract `Adansonia` from the text with the following code.
```{r}
substr(tree_1, start = 1, stop = 9)
```

`substr()` is also used to replace strings in data.
```{r}
substr(tree_1, start = 11, nchar(tree_1)) <- "gregorii"
tree_1
```

There are times, we would like to split text data, using `strsplit()`, we can split the `tree_1` strings to genus and species with the spaces between them.
```{r}
strsplit(tree_1, split = " ")
```

Notice the output, both words now have their inverted comma.

There are still more functions for string manipulation in R, not all will be covered, as this will be a large book volume. However, Concatenation will be covered. To concatenate data using either `paste0()` or `paste()`. There are almost similar having slight differences. 
```{r}
paste(tree_1, " man")
paste("My best tree species is ", tree_1)
```

## Custom Functions {#sec-cust-fns}
The functions that are preloaded in R are a lot, and they will likely not meet all our statistical or operational needs. For some tasks you want to do, you would need to write your own function. 

### Creating Custom Functions 
For example we can estimate the z-score of some the data we have created so far. The z-score tells you how many standard deviations an element is from the mean of the vector. It transforms our data into a common scale. The formula for z-score is given as:

$$Z = \frac{x - \mu}{\sigma}$$
Where:

    -   $x$ is the value in the vector,
    -   $\mu$ is the mean of the vector,
    -   $\sigma$ is the standard deviation of the vector.

Without a custom function we will do the following:
```{r}
average_tomato <- mean(tomato_diameter)
sd_tomato <- sd(tomato_diameter)
z_tomato <- (tomato_diameter - average_tomato) / sd_tomato

average_tree_diameter <- mean(tree_diameter)
sd_tree_diameter <- sd(tree_diameter)
z_tree_diameter <- (tree_diameter - average_tree_diameter) / sd_tree_diameter

average_dt <-mean(dt)
sd_tomato <- sd(dt)
z_dt <- (dt - average_dt) / sd_tomato
```

We got the following results
```{r}
z_tomato
z_tree_diameter
z_dt
```
If we look closely, we can spot an error while computing `z_dt`. The following steps can be done easily with a custom function. To create a custom function we need to solidify our understanding of functions. In R, every functions have three basic parts; a name, a body, and set of arguments. To create functions in R we call `function()` function followed by `{}`. 

```{r}
new_function <- function() {}
```
The name of the arguments is passed into the parenthesis of `function()` and the body, or expresions are passed into the curly brackets.

```{r}
z_score <- function(x) {
  average_x <- mean(x, na.rm = TRUE)
  sd_x <- sd(x, na.rm = TRUE)
  z_value = (x - average_x)/sd_x
  return(z_value)
}
```

Next is using the custom function. We should note that, custom functions are called in a similar way that R's built-in functions are called, the object name followed by parenthesis.
```{r}
z_tomato_2 <- z_score(tomato_diameter)
z_tomato_2
```


```{r}
z_tree_diameter_2 <- z_score(tree_diameter)
z_tree_diameter_2
```


```{r}
z_dt_2 <- z_score(dt)
z_dt_2
```
Using a custom function does not only make our code more readable, it prevents errors from copying and pasting, and if we need to make a change in out formula, we need to do it in only a place--the function definition.

### When to Write a Custom Functiom
When do you need to write a function?

  - When you find yourself copying, pasting and adapting blocks of code. Copying, pasting and adapting codes to new data or objects should not be more than three times.
  - When the code is clunky and not readable, writing custom functions improves the readability of your code
  - For individuals that regular submit report to different people, stakeholders, and groups, parametizing different inputs in your report ensure you produce multiple focused report at once.
  - Avoiding code duplication


:::{.callout-important}
## Getting Help
Use the `help()` function and `?` to get help. Also, use `args()` to see the arguments of functions. Just to let you know, there are more than 2300 functions loaded when an R session starts and that's a lot. You will remember some and forget some, but as keep using R they become a part of you.

You are not expected to remember these functions, use `help()`, `?` and `args` and check online for resources when you neeed help.
:::

## Exercise {.unnumbered}
1. Using `seq()`, create a sequence of odd numbers between 1 and 100.
2. Read the documentation of `mean()`, `median()`, `sd()`, and `var()`. What does the `is.na()` argument does?
3. What is the difference between `substring()` and `substr()`?
4. What is the difference between `paste()` and `paste0()`.


## Summary
Functions are little codes that performs specific functions. Armed with them we can fly on eagles wing. Functions such as `mean()`, `length()`, `plot()` and so on, makes it easier to perform tasks. However, this does not imply that there are functions for all tasks we want to accomplish. In such case, we need to develop our own functions called, custom functions. There are also functions in other packages which extends the capabilities of R.