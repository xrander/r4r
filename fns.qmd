# Functions {#sec-fns}

:::{.callout-tip}
This section is under review.
:::

In the previous chapters, functions such as `c()`, `as.factors()`, and `class()` were used. These objects with parentheses in front of them are referred to as **functions**. Functions are self-contained blocks of code designed to perform specific tasks. 

We use functions because they simplify our work and make analyses more efficient. If we make mistakes, functions allow for easy corrections and the interesting thing is they are reusable. You don't throw away a knife once you are done using it, you clean it up and reuse it whenever you need it again. Functions are similar to that reusable chunks of codes.

In R, function names are usually verbs, representing actions to be taken. Since functions are named objects followed by parentheses, their parentheses serve a purpose -- to hold arguments.  **Arguments** are the values passed to the function to perform a task on, think of them as onions, beef, or whatever you use a knife to cut, but this time around they are our a part or the whole of a data

One of the most basic and very important function is `c()` which combines values. Let's take a hypothetical tomato experiment as an example. In this experiment, we are interested in seeing how three fertilizers influences the weight of tomato. So we go to our greenhouse and get some tomato fruit measuring their weight in `g`. Using `c()`, we can combine the values of all the tomato weights collected.

```{r}
tomato_weight <- c(43.68, 70.23, 29.31, 83.08, 27.42, 53.50, 30.95, 10.51, 41.41, 68.06)
```

To see the weights that have been recorded simply call the variable as is and run  it.

```{r}
tomato_weight
```
Alternatively, you can use either the `print()` function


```{r}
print(x = tomato_weight)
```

Let's breakdown the `print()` function:

- The name of the variable that will hold the value, `x`, is the **parameter**.
- The name-value pair `x = tomato_weight` is the argument
- `tomato_weight` is the value


## Arguments
Arguments are the input you pass to a function when you call it.  It provides a value for a parameter, and it can be passed by position or by name, i.e., keyword.

### Types of Arguments

- **Keyword or named arguments**: Here, you explicitly name the parameter in the function call. This makes your code clearer and order-independent.
The previous print statement used the keyword argument. Another example is below with the `round()` function which round-up values
```{r}
round(x = tomato_weight, digits = 1)
```
The `tomato_weight` values are rounded up to 1 decimal point. This could be written with a different order, and the result will still be the same because the keywords are used.

```{r}
round(digits = 1, x = tomato_weight)
```

- **Positional argument**: Here, you provide the value in order without including the parameter name. The function matches the value to parameters by their position in the function definition. This is quite a common practice as it reduces typing. Most functions usually takes the object/data and with that understanding positional arguments are used. 
```{r}
round(tomato_weight, 1)
```

`tomato_weight` is matched to the first parameter `x` in the `round()` function and `1` matched to `digits`. If this is reordered without the keyword, we'd either get an unexpected result or an error.

```{r}
round(1, tomato_weight)
```


To know more about any function use `help()` and pass the function in between the parentheses or type a question mark `?` followed by the function name. 

```{r}
?round()
help("round")
```

The result should be something like in @fig-help

![Documentation of the `round()` function. Preview of functions documentations looks like](images/help-fns.png){#fig-help width=80% fig-align="center"}

## Some Built-in Functions
There are many functions readily available in R to assist with your analysis tasks. For tasks that R's built-in functions can't handle, you can always install packages (covered in [Chapter @sec-pkgs]) or develop your custom functions, a concept we will cover in @sec-cust-fns.


For examples, to know the total number of observations we have in `tomato_weight` we can use `length()`.
```{r}
length(tomato_weight)
```

To find the average of `tomato_weight`, we use `mean()`.

```{r}
mean(x = tomato_weight)
```

To check the median of the data use (you guessed it right) `median()`. We also have `sd()`, `var()`, and `cor()` for estimating the standard deviation, variance and correlation respectively.


```{r}
median(tomato_weight)
sd(tomato_weight)
var(tomato_weight)
cor(tomato_weight, 1:10)
```

We've seen `round()` in action before. However `round()` is having two siblings . The `ceiling()` and `floor()` function to round up and down respectively.

```{r}
floor(3.544)
ceiling(3.544)
```

To create a sequence of number, we can use colon (`:`).
```{r}
20:30
30:20
```
This gives a sequence of numbers increased or decreased by 1. To get more control over the sequence you want to create use the `seq()` function. Important arguments of `seq()` to remember are `from`, `to`, and `by`.

```{r}
seq(from = 1, to = 100, by = 1)
```
With positional argument, it could be written as shown below
```{r}
#| eval: false
seq(1, 100, 1)
```

R also comes with built-in constants such as `pi` , `letters`, `LETTERS`, `month.abb` and `month.name`
```{r}
pi
letters
month.abb
```


### Simulating Numbers
Aside from generating sequence of numbers, we can simulate numbers using R to meet certain distributions. An important part of research is data simulation and R provides a robust set of functions for generating random numbers from different distributions. For example, the `runif()` function generates random numbers from a uniform distribution, `rnorm()` for the normal distribution, `rpois()` for the Poisson distribution, and `rbinom()` for the binomial distribution. These functions belong to a family that also includes functions for calculating density (**d**), distribution functions (**p**), quantiles (**q**), and random deviates (**r**) for various statistical distributions. A comprehensive list of these functions can be found in @tbl-distro-funs.

For example, to simulate the height of 100 *Tectona grandis* in a plantation with mean diameter of 35 cm and a standard deviation of 2.3 cm we use `rnorm()`. `rnorm()` generates random numbers following the normal distribution.
```{r}
teak_diameter <- rnorm(100, mean = 35, sd = 2.3)
teak_diameter
```

The numbers generated above will be different from that which you will produce. This is because they are random numbers. The beauty of R is its reproducibility, and what use is reproducibility if others can't get the same result as us if they follow exactly the same steps as us. That's why there's the `set.seed()` function which captures or get a snapshot of specific numbers randomly generated. Given that the seed number is the same, whatever pseudorandom numbers are produce can be replicated by another person.

```{r}
set.seed(123)
tree_diameter <- rnorm(100, mean = 25, sd = 12.3)
tree_diameter
```

With the seed set already, you should have exactly the same result as what is produced here.

We can understand the data which we just produced if it is visualized. With the `plot()` function, we can produce a graph. Not to worry we will cover more on visualizations @sec-dataviz. 

```{r}
#| label: fig-dia-hist
#| fig-cap: Histogram of simulated tree diameter distribution
#| fig-subcap: true
#| layout-ncol: 2
#| echo: false

hist(
  tree_diameter,
  col = "springgreen3",
  xlab = "Diameter",
  main = "Histogram of Tree Diameter"
)

plot(
  density(tree_diameter),
  col = "chocolate3",
  xlab = "Tree Diameter",
  lwd = 4,
  lty = "dashed"
)
```

In forestry, the distribution of trees diameter in a plantation is usually a bell-shaped curve. @fig-dia-hist-2 shows the distribution of the diameter, while the distribution of the diameters represented as a histogram can be seen in @fig-dia-hist-1.


While `rnorm()` generates numbers that follow a normal distribution `runif()` generates numbers that follow a uniform distribution, @fig-hist-unif.
```{r}
set.seed(123)
dt <- runif(100, min = 10, max = 20)
dt
```

```{r}
#| label: fig-hist-unif
#| echo: false
#| fig-cap: Uniformly distributed randomly generated numbers. The higher the number of observations the more uniform the distribution.
hist(
  dt,
  xlab = "diameter",
  main = "Uniform distribution"
)
```

Other functions for generating random numbers according to distribution are:


|Function|Distribution|Description|
|:--------|:------------|:-----------|
|runif| Uniform distribution | Generates random numbers from a uniform distribution |
|rnorm| Normal distribution | Generates random numbers from a normal distribution |
|rpois| Poisson distribution | Generates random numbers from a poisson distribution |
|rbinom| Binomial distribution | Generates random numbers from a binomial distribution |
|dunif| Uniform distribution | Computes the density of a uniform distribution |
|dnorm| Normal distribution | Computes the density of a normal distribution |
|dpois| Poisson distribution | Computes the density of a poisson distribution |
|dbinom| Binomial distribution | Computes the density of a binomial distribution |
|punif| Uniform distribution | Computes the cumulative distribution function (CDF) of a uniform distribution |
|pnorm| Normal distribution | Computes the cumulative distribution function (CDF) of a normal distribution|
|ppois| Poisson distribution | Computes the cumulative distribution function (CDF) of a poisson distribution |
|pbinom| Binomial distribution | Computes the cumulative distribution function (CDF) of a binomial distribution |
|qunif| Uniform distribution | Computes the quantiles of a uniform distribution |
|qnorm| Normal distribution | Computes the quantiles of a normal distribution |
|qpois| Poisson distribution | Computes the quantiles of a poisson distribution |
|qbinom| Binomial distribution | Computes the quantiles of a binomial distribution |

: Functions for generating random numbers of data in R {#tbl-distro-funs tbl-colwidths="[10, 25, 65]"}

### Sampling with sample()
Another important function for randomization is using `sample()`. `sample()` is used for selecting values at random from a set of data. Let's take the example below:

```{r}
new_dt <- seq(1, 20, 2)
new_dt
```
We can randomly select five values from `new_dt` using `sample()`
```{r}
set.seed(10)
sample(new_dt, 5)
```

The `sample()` function is used for simulating die roll, coin toss, and even draws from a stack of card. For example, we can simulate the number we get from a die with the following:

```{r}
die <- 1:6
```

```{r}
sample(die, 1)
```

If you continue to run the code above, you will continue to get different values. A good challenge for you would be to simulate two die.

#### Weighted Samples and Sampling with Replacement
More than selecting values at random, with `sample()`, we can also select with replacement by setting the value of the argument `replace` to `TRUE`. 
```{r}
sample(new_dt, 20, replace = TRUE)
```

The probabilities of the values we want to randomly select can also be determined by the `prob` argument. This is perfect for weighted probability. Example is a die of unequal prob.
```{r}
die <- 1:6
die_prob <- c(0.23, 0.23, 0.23, 0.21, 0.07, 0.03)
```

```{r}
set.seed(123)
die_selected <- sample(x = die, size = 100, replace = TRUE, prob = die_prob)
die_selected
```
To get the number of occurrence of each die face we can use the `table()` function. and notice that values with lower probability of occurring such as 5 and 6 were sampled less.
```{r}
table(die_selected)
```

### Character Functions
We've been working with numbers for a while, now lets see some functions that we can use for character data types. To begin, let's create a vector of character data type.
```{r}
tree_1 <- "Adansonia digitata"
tree_1
```
#### Counting Characters

Counting character is done using `nchar()`. Whenever, we count characters, we usually neglect the space and as such when we count the `tree_1` object we should expect 17 characters as what we have in @fig-char.

![Number of characters in the object if counted without the space](images/nchar-wrong.png){#fig-char fig-align="center" width=80%}


Using `nchar()` we get a different result.
```{r}
nchar(tree_1)
```
This might come as a surprise.  This is because spaces are also counted as characters, not only in R, but also in word processors like Microsoft Word or LibreOffice Writer and other programming languages. Given that, @fig-nchar shows the actual number of characters with spaces included.


![Number of characters in the object with the spaces included](images/nchar.png){#fig-nchar fig-align="center" width=80%}


Characters can also be changed to lower cases by using `tolower()`, and changed to upper cases by using `toupper()`. Unfortunately, Base R does not provide a function to changed strings to title or sentence cases, but there are open source packages available to do this . You can explore [stringr](https://stringr.tidyverse.org/) by Hadley Wickham and [stringi](https://stringi.gagolewski.com/) by Marek Gagolewski which contains functions for such operation and other complex string manipulation operations in R.

```{r}
tolower(tree_1)
toupper(tree_1)
```


#### Trimming Characters

There are some data where part of the variable are filled by respondents. This can include records of names, for example, clinic require records of physicians and the name of their patients. A particular physician could attend to multiple patient in a day and at different times in a day. Below is an example of physicians name in a clinic working different times.
e could have the names of five clinic physicians repeated multiple times, according to the number of times they have shifts, or attend to patients. 

```{r}
physician <- c("Clara Reeves", "Motolani Eniola", "Praaval Duval", " Praaval Duval ", "Sunmisola Aderibigbe ", " Sunmisola Aderibigbe"," Clara Reeves", "Clara Reeves ", " Motolani Eniola ", "Praaval Duval ")

physician
```

The example above is a classic example of having white spaces. We can check the data to see the number of distinct physicians we have.

```{r}
length(unique(physician))
```
This returns 10 but we can see clearly that some names just has extra white spaces. With the `trimws()` function we could remove excess white spaces in the data. Before using the function lets count the number of characters we have for each observation. We will do the same after trimming to see the difference.

```{r}
nchar(physician)
```


```{r}
physician_trimmed <- trimws(physician)
physician_trimmed
```

```{r}
nchar(physician_trimmed)
```

Now we can tell the number of characters reduced for most of the observations. We can now confirm the number of physicians we have using `length()` and `unique()`.

```{r}
length(unique(physician_trimmed))
```
The four physicians are:

```{r}
unique(physician_trimmed)
```

:::{.callout-important}
The technique taught here is very useful in the data cleaning process.
:::


#### Extracting and Replacing Part(s) of a Chaaracter

To extract certain aspect of your text, use `substring()`, or `substr()`. `substr()` takes the argument `x` which is your data, `start` which is the index position for the first value of the text to be extracted or replaced, and `stop` which is the index position for the last value of the text to be extracted or replaced. For example, we can extract `Adansonia` from the text with the following code.
```{r}
substr(tree_1, start = 1, stop = 9)
```

To replace a certain part of the text we can also use `substr()`.
```{r}
substr(tree_1, start = 11, nchar(tree_1)) <- "gregorii"
tree_1
```

There are times, we would like to split text data, using `strsplit()`. For example we can split the `tree_1` to genus and species with the spaces between them.
```{r}
strsplit(tree_1, split = " ")
```

Notice the output, both words now have their inverted comma.

There are still more functions for string manipulation in R, not all will be covered, as this will be a large book volume.

## Custom Functions {#sec-cust-fns}
The functions that are preloaded in R are a lot, but that does not mean they will meet all our statistical or operational needs. For some tasks you want to do, you would need to write your own function. 

### Creating Custom Functions 
For example we can estimate the z-score of the `tomato_weight` data. The z-score tells you how many standard deviations an element is from the mean of the vector. It transforms our data into a common scale. The formula for z-score is given as:

$Z = \frac{x - \mu}{\sigma}$


Where:

-   $x$ is the value in the vector,
-   $\mu$ is the mean of the vector,
-   $\sigma$ is the standard deviation of the vector.

Without a custom function we will do the following:
```{r}
average_tomato <- mean(tomato_weight)
sd_tomato <- sd(tomato_weight)
z_tomato <- (tomato_weight - average_tomato) / sd_tomato

average_tree_diameter <- mean(tree_diameter)
sd_tree_diameter <- sd(tree_diameter)
z_tree_diameter <- (tree_diameter - average_tree_diameter) / sd_tree_diameter

average_dt <-mean(dt)
sd_tomato <- sd(dt)
z_dt <- (dt - average_dt) / sd_tomato
```

We got the following results
```{r}
z_tomato
z_tree_diameter
z_dt
```
If we look closely, we can spot an error while computing `z_dt`. The following steps can be done easily with a custom function. To create a custom function we need to solidify our understanding of functions. In R, every functions have three basic parts; a name, a body, and set of arguments. To create functions in R we call `function()` function followed by `{}`. 

```{r}
new_function <- function() {}
```
The name of the arguments is passed into the parenthesis of `function()` and the body, or expresions are passed into the curly brackets.

```{r}
z_score <- function(x) {
  average_x <- mean(x, na.rm = TRUE)
  sd_x <- sd(x, na.rm = TRUE)
  z_value = (x - average_x)/sd_x
  return(z_value)
}
```

Next is using the custom function. We should note that, custom functions are called in a similar way that R's built-in functions are called, the object name followed by parenthesis.
```{r}
z_tomato_2 <- z_score(tomato_weight)
z_tomato_2
```


```{r}
z_tree_diameter_2 <- z_score(tree_diameter)
z_tree_diameter_2
```


```{r}
z_dt_2 <- z_score(dt)
z_dt_2
```
Using a custom function does not only make our code more readable, it prevents errors from copying and pasting, and if we need to make a change in out formula, we need to do it in only a place--the function definition.

### When to Write a Custom Functiom
When do you need to write a function?

  - When you find yourself copying, pasting and adapting blocks of code. Copying, pasting and adapting codes to new data or objects should not be more than three times.
  - When the code is clunky and not readable, writing custom functions improves the readability of your code
  - For individuals that regular submit report to different people, stakeholders, and groups, parametizing different inputs in your report ensure you produce multiple focused report at once.
  - Avoiding code duplication

:::{.callout-important}

## Getting Help
Use the `help()` function and `?` to get help. Also, use `args()` to see the arguments of functions. Just to let you know, there are more than 2300 functions loaded when an R session starts and that's a lot. You will remember some and forget some, but as keep using R they become a part of you.

You are not expected to remember these functions, use `help()`, `?` and `args()` and check online for resources when you need help.
:::


## Summary
Functions are little codes that performs specific functions. Armed with them we can fly on eagles wing. Functions such as `mean()`, `length()`, `plot()` and so on, makes it easier to perform tasks. However, this does not imply that there are functions for all tasks we want to accomplish. In such case, we need to develop our own functions called, custom functions. There are also functions in other packages which extends the capabilities of R.

## Exercise {.unnumbered}
1. Using `seq()`, create a sequence of odd numbers between 1 and 100.
2. Read the documentation of `mean()`, `median()`, `sd()`, and `var()`. What does the `is.na()` argument does?
3. What is the difference between `substring()` and `substr()`?
4. What is the difference between `paste()` and `paste0()`?
