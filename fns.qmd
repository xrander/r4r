# Functions {#sec-fns}

:::{.callout-caution}
This section is still under development
:::

In previous chapters, we used functions such as `c()`, `as.factors()`, and `class()` to mention a few. So what are functions? Functions are self contained blocks of code that accomplish a specific task. A function we can relate with camera is taking pictures, and a bicycle is transportation. In R, functions are named objects followed by parentheses. Within the parentheses of functions are contained arguments. Arguments are values passed into a function to get a result or outcomes.

For example to record the diameter (mm) of tomato plants, use the function `c()`. This function combine values into a list or vector.
```{r}
tomato_diameter <- c(43.68, 70.23, 29.31, 83.08, 27.42, 53.50, 30.95, 10.51, 41.41, 68.06)
```

You can print out the plants record by using the function `print()`
```{r}
print(tomato_diameter)
```

Alternatively, writing the object name on the console and pressing `enter` on your keyboard would return records
```{r}
tomato_diameter
```

## Some Built-in Functions
There are a lot of functions readily loaded in R to equip you for the analysis tasks you want to undertake. For tasks that R built-in function can't handle, you can install packages (covered in [Chapter @sec-pkgs]) or build your own covered in [ -@sec-cust-fns]. The various built-in functions are designed to perform specific tasks on the various data types. There are some designed to work with files and folders as well.

We may be interested in finding the average of the records of tomato_diameter. To do that, we use `mean()`.

```{r}
mean(x = tomato_diameter)
```
The above can also be written as `mean(tomato_diamter)`. `x` here is the argument that the function takes and in this case is our record *tomato_diameter*. To know more about any function use the function `help()` or type a question mark followed by the question name. So we have `help(mean)` or `?mean`.

We can check the median of the record using -- you guessed it right, `median()`. 
```{r}
median(tomato_diameter)
```
To see a graph of the data you can pass the data into plot and it will generate an automatic plot for you. 
```{r}
plot(tomato_diameter)
```
The graph can be customized by passing values into other arguments within the `plot()` function.
```{r}
plot(tomato_diameter, col = "red", pch = 3)
```
`col` changes the color while `pch` changes the shape of each point, you can also use `hist()` to see the distribution of the data.
```{r}
hist(tomato_diameter, col = "coral3", xlab = "Tomato Diameter", main = "Distribution of Tomato Plant Diameter")
```
The `xlab` argument is used to change the label of the x-axis, and to change the y-axis you can use `ylab`. The `main` argument is used to change the title of the graph. More on how to make visualization with R will be discussed in [Chapter @sec-dataviz] and [Chapter @sec-edai].

The code used to produce the graph is clear, but as you write more complex codes, readability reduces. The code could improve by writing one or two arguments in a line rather than all in a line. The code above can also be written as:

```{r}
hist(
  tomato_diameter,
  col = "coral3",
  xlab = "Tomato Diameter",
  main = "Distribution of Tomato Plant Diameter"
)
```

### Simulating Numbers
An important part of research is data simulation and R provides a robust set of functions for generating random numbers from different probability distributions. For example, the *runif* function generates random numbers from a uniform distribution, *rnorm* for the normal distribution, *rpois* for the Poisson distribution, and *rbinom* for the binomial distribution. These functions belong to a family that also includes functions for calculating density (*d*), distribution functions (*p*), quantiles (*q*), and random deviates (*r*) for various statistical distributions. A comprehensive list of these functions can be found in @tbl-distro-funs.

|Function|Distribution|Description|
|--------|------------|-----------|
|runif| Uniform distribution | Generates random numbers from a uniform distribution |
|rnorm| Normal distribution | Generates random numbers from a normal distribution |
|rpois| Poisson distribution | Generates random numbers from a poisson distribution |
|rbinom| Binomial distribution | Generates random numbers from a binomial distribution |
|dunif| Uniform distribution | Computes the density of a uniform distribution |
|dnorm| Normal distribution | Computes the density of a normal distribution |
|dpois| Poisson distribution | Computes the density of a poisson distribution |
|dbinom| Binomial distribution | Computes the density of a binomial distribution |
|punif| Uniform distribution | Computes the cumulative distribution function (CDF) of a uniform distribution |
|pnorm| Normal distribution | Computes the cumulative distribution function (CDF) of a normal distribution|
|ppois| Poisson distribution | Computes the cumulative distribution function (CDF) of a poisson distribution |
|pbinom| Binomial distribution | Computes the cumulative distribution function (CDF) of a binomial distribution |
|qunif| Uniform distribution | Computes the quantiles of a uniform distribution |
|qnorm| Normal distribution | Computes the quantiles of a normal distribution |
|qpois| Poisson distribution | Computes the quantiles of a poisson distribution |
|qbinom| Binomial distribution | Computes the quantiles of a binomial distribution |

: Functions for generating random numbers of data in R {#tbl-distro-funs}


## Custom Functions {#sec-cust-fns}
### Creating Custom Functions 
### Using Custom function
## Getting Help

:::{.callout-caution}
There are more than 2300 functions loaded when an R session starts and that's a lot. Some will be remembered and some forgotten. You are not expected to remember these functions, even the people that developed these functions forget some of the function and their arguments. Remember there always resources for you
:::